# .github/workflows/pr-validation.yml
# Este workflow roda automaticamente em cada Pull Request para garantir a qualidade do c√≥digo.
# Ele instala depend√™ncias, constr√≥i a aplica√ß√£o e executa os testes E2E com Playwright.
# Projeto: DevOps UNISATC A3 - Strapi Application

name: ‚úÖ Validar Pull Request (Testes E2E)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9.4.0'

jobs:
  # ===================================================================
  # JOB 1: PREPARAR O AMBIENTE E DEPEND√äNCIAS
  # ===================================================================
  setup-and-build:
    name: üîß Preparar Ambiente e Construir Aplica√ß√£o
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: üì• Baixar C√≥digo do Reposit√≥rio
        uses: actions/checkout@v4

      - name: üì¶ Configurar Node.js e pnpm
        uses: pnpm/action-setup@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          version: ${{ env.PNPM_VERSION }}
      
      - name: üîë Gerar Chave de Cache
        id: cache-key
        run: echo "key=node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: üíæ Usar Cache de Depend√™ncias
        id: cache-deps
        uses: actions/cache@v4
        with:
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: node-modules-${{ runner.os }}-
          path: |
            node_modules
            ~/.cache/ms-playwright

      - name: üõ†Ô∏è Instalar Ferramentas de Build
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y build-essential python3

      - name: üì• Instalar Depend√™ncias (se n√£o houver cache)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --no-frozen-lockfile

      - name: üé≠ Instalar Navegadores do Playwright (se n√£o houver cache)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps

      - name: üèóÔ∏è Construir Aplica√ß√£o Strapi
        run: pnpm build
        env:
          NODE_ENV: production
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/data.db

      - name: üì§ Salvar Build como Artefato
        uses: actions/upload-artifact@v4
        with:
          name: strapi-build-${{ github.run_id }}
          path: |
            build/
            .tmp/
          retention-days: 1

  # ===================================================================
  # JOB 2: EXECUTAR OS TESTES E2E
  # ===================================================================
  run-e2e-tests:
    name: üß™ Rodar Testes End-to-End
    runs-on: ubuntu-latest
    needs: setup-and-build # Depende do sucesso do job anterior

    steps:
      - name: üì• Baixar C√≥digo do Reposit√≥rio
        uses: actions/checkout@v4
        
      - name: üì¶ Configurar Node.js e pnpm
        uses: pnpm/action-setup@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          version: ${{ env.PNPM_VERSION }}

      - name: üíæ Restaurar Cache de Depend√™ncias
        uses: actions/cache@v4
        with:
          key: ${{ needs.setup-and-build.outputs.cache-key }}
          path: |
            node_modules
            ~/.cache/ms-playwright
      
      - name: üì• Baixar Build do Artefato
        uses: actions/download-artifact@v4
        with: 
          name: strapi-build-${{ github.run_id }}

      - name: üöÄ Iniciar Strapi em Background
        run: |
          pnpm start &
          echo $! > strapi.pid
        env:
          NODE_ENV: test
          HOST: 0.0.0.0
          PORT: 1337
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/test-data.db
          STRAPI_DISABLE_UPDATE_NOTIFICATION: true
          JWT_SECRET: "dummy"
          ADMIN_JWT_SECRET: "dummy"
          APP_KEYS: "dummy"
          API_TOKEN_SALT: "dummy"
          TRANSFER_TOKEN_SALT: "dummy"

      - name: ‚è≥ Aguardar Aplica√ß√£o Iniciar
        run: |
          echo "Aguardando Strapi ficar saud√°vel (at√© 2 minutos)..."
          timeout 120s bash -c 'until curl -fs http://localhost:1337/admin/health/strapi; do echo "Aguardando..."; sleep 5; done'
          echo "Aplica√ß√£o pronta para os testes."

      - name: üé≠ Executar todos os testes do Playwright
        run: pnpm test
        env:
          CI: true
          STRAPI_URL: http://localhost:1337

      - name: üìä Salvar Relat√≥rio de Testes
        if: always() # Sempre executa, mesmo que os testes falhem
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-pr-${{ github.event.number }}
          path: playwright-report/

      - name: üßπ Limpar Processo do Strapi
        if: always()
        run: kill $(cat strapi.pid) || true
