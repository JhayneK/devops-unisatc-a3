# .github/workflows/docker-build.yml
# Workflow para build e push de imagem Docker para Google Container Registry
# Projeto: DevOps UNISATC A3 - Strapi Application

name: 🐳 Docker Build & Push

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild even if no changes'
        type: boolean
        default: false

# Variáveis de ambiente para todo o workflow
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_PROJECT_NUMBER: 159248096205
  GCP_REGION: southamerica-east1
  GCR_HOSTNAME: gcr.io
  IMAGE_NAME: devops-unisatc-a3-strapi
  DOCKERFILE_PATH: ./Dockerfile
  # Credenciais para o Workload Identity Federation
  GCP_SERVICE_ACCOUNT: strapi-deployer@sound-dialect-458215-j9.iam.gserviceaccount.com
  WIF_POOL: github-pool-a3
  WIF_PROVIDER: github-provider

# Job para configurar variáveis de ambiente
jobs:
  setup:
    name: 🔧 Setup Environment
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
      image-full: ${{ steps.meta.outputs.image-full }}
      should-build: ${{ steps.changes.outputs.should-build }}
      environment: ${{ steps.meta.outputs.environment }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Generate metadata
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            ENVIRONMENT="production"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="${GITHUB_SHA::8}"
          fi
          
          if [[ "$ENVIRONMENT" != "production" ]]; then
            IMAGE_TAG="${IMAGE_TAG}-${ENVIRONMENT}"
          fi
          
          IMAGE_FULL="${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image-full=${IMAGE_FULL}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

      - name: 🔍 Check for changes
        id: changes
        run: |
          SHOULD_BUILD="true"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.force_rebuild }}" == "false" ]]; then
            if git diff --quiet HEAD~1 HEAD -- . ':!.github' ':!docs' ':!*.md'; then
              SHOULD_BUILD="false"
            fi
          fi
          echo "should-build=${SHOULD_BUILD}" >> $GITHUB_OUTPUT

  # Job para build e teste da imagem
  build:
    name: 🏗️ Build, Test & Scan Image
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-build == 'true'

    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: "projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.WIF_POOL }}/providers/${{ env.WIF_PROVIDER }}"
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: 🐳 Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }} --quiet

      - name: 🏗️ Build Docker image
        run: |
          docker build \
            --file ${{ env.DOCKERFILE_PATH }} \
            --tag ${{ needs.setup.outputs.image-full }} \
            .
      
      - name: 🧪 Test Docker image (Smoke Test)
        run: |
          echo "🧪 Iniciando teste de fumaça..."
          
          # Inicia o contêiner em background com variáveis de ambiente fictícias que o Strapi exige
          docker run -d --name strapi-test \
            -p 1337:1337 \
            -e NODE_ENV=development \
            -e DATABASE_CLIENT=sqlite \
            -e DATABASE_FILENAME=.tmp/test.db \
            -e JWT_SECRET=test-jwt-secret-dummy-value-for-testing \
            -e ADMIN_JWT_SECRET=test-admin-jwt-secret-dummy-value-for-testing \
            -e APP_KEYS='testkey1,testkey2,testkey3,testkey4' \
            -e API_TOKEN_SALT=test-api-token-salt \
            -e TRANSFER_TOKEN_SALT=test-transfer-token-salt \
            ${{ needs.setup.outputs.image-full }}

          echo "⏳ Aguardando contêiner inicializar (até 60s)..."
          
          # Espera até que o Strapi responda no endpoint de health ou o tempo se esgote (60s)
          timeout 60s bash -c 'until curl -f http://localhost:1337/admin/health/strapi; do sleep 5; done'

          echo "✅ Teste de fumaça concluído com sucesso. O contêiner iniciou corretamente."

      - name: 🧹 Clean up test container
        if: always() # Garante que este passo sempre rode, mesmo que o teste falhe
        run: |
          echo "🧹 Limpando contêiner de teste..."
          docker logs strapi-test || true
          docker stop strapi-test || true
          docker rm strapi-test || true

  # Job para push da imagem
  push:
    name: 📤 Push to Registry
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name != 'pull_request' && needs.setup.outputs.should-build == 'true'

    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: 🔐 Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: "projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.WIF_POOL }}/providers/${{ env.WIF_PROVIDER }}"
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: 🐳 Configure Docker for GCR
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }} --quiet

      - name: 🏗️ Rebuild image for push cache
        # O build precisa ser refeito neste job para que o Docker tenha a imagem em seu contexto.
        # Isso é rápido pois o cache de layers do Docker geralmente é utilizado.
        run: |
          docker build \
            --file ${{ env.DOCKERFILE_PATH }} \
            --tag ${{ needs.setup.outputs.image-full }} \
            .

      - name: 📤 Push image to GCR
        run: |
          docker push ${{ needs.setup.outputs.image-full }}
          
          # Se for a branch principal, também envia com a tag 'latest'
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            docker tag ${{ needs.setup.outputs.image-full }} ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          fi

  # Job para limpeza de imagens antigas
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [setup, push]
    if: always() && needs.push.result == 'success'

    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: 🔐 Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: "projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.WIF_POOL }}/providers/${{ env.WIF_PROVIDER }}"
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: 🧹 Clean up old images
        run: |
          # Mantém apenas as 10 imagens mais recentes e apaga as com mais de 30 dias
          gcloud artifacts docker images delete ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }} \
            --delete-tags \
            --keep-tags=10 \
            --filter="createTime<-P30D" \
            --quiet