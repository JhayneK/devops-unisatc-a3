# .github/workflows/docker-build.yml
# Workflow para build e push de imagem Docker para Google Container Registry
# Projeto: DevOps UNISATC A3 - Strapi Application

name: üê≥ Docker Build & Push

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

# Vari√°veis de ambiente para todo o workflow
env:
  GCP_PROJECT_ID: sound-dialect-458215-j9
  GCP_REGION: southamerica-east1
  ARTIFACT_HOSTNAME: southamerica-east1-docker.pkg.dev
  IMAGE_NAME: devops-unisatc-a3-strapi
  DOCKERFILE_PATH: ./Dockerfile

jobs:
  build-test-and-push:
    name: üèóÔ∏è Build, Test & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: üê≥ Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.ARTIFACT_HOSTNAME }} --quiet

      - name: üè∑Ô∏è Generate Image Tag
        id: meta
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG=${GITHUB_REF#refs/tags/}
          else
            IMAGE_TAG="${GITHUB_SHA::8}"
          fi
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          
      - name: üèóÔ∏è Build Docker image
        run: |
          IMAGE_FULL_NAME="${{ env.ARTIFACT_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "IMAGE_FULL_NAME=$IMAGE_FULL_NAME" >> $GITHUB_ENV
          echo "Building image: $IMAGE_FULL_NAME"
          docker build -t "$IMAGE_FULL_NAME" --file ${{ env.DOCKERFILE_PATH }} .
          
      - name: üß™ Test Docker image (Smoke Test)
        continue-on-error: true
        run: |
          echo "üß™ Iniciando teste de fuma√ßa para a imagem: ${{ env.IMAGE_FULL_NAME }}"
          docker run -d --name strapi-test \
            -p 1337:1337 \
            -e NODE_ENV=development \
            -e DATABASE_CLIENT=sqlite \
            -e DATABASE_FILENAME=.tmp/test.db \
            -e JWT_SECRET=test-jwt-secret-dummy-value-for-testing \
            -e ADMIN_JWT_SECRET=test-admin-jwt-secret-dummy-value-for-testing \
            -e APP_KEYS='testkey1,testkey2,testkey3,testkey4' \
            -e API_TOKEN_SALT=test-api-token-salt \
            -e TRANSFER_TOKEN_SALT=test-transfer-token-salt \
            "${{ env.IMAGE_FULL_NAME }}"
          
          echo "‚è≥ Aguardando cont√™iner inicializar (at√© 90s)..."
          timeout 90s bash -c 'until curl -fs http://localhost:1337 > /dev/null 2>&1; do echo "Aguardando..."; sleep 5; done' || {
            echo "‚ùå Timeout - mostrando logs:"
            docker logs strapi-test
            exit 1
          }
          echo "‚úÖ Teste de fuma√ßa conclu√≠do com sucesso."
          
      - name: üßπ Clean up test container
        if: always()
        run: |
          echo "üßπ Limpando cont√™iner de teste..."
          docker stop strapi-test || true
          docker rm strapi-test || true
      
      - name: üì§ Push image to Artifact Registry
        if: github.event_name != 'pull_request'
        run: |
          echo "üì§ Enviando imagem para o registro: ${{ env.IMAGE_FULL_NAME }}"
          docker push "${{ env.IMAGE_FULL_NAME }}"
          
          # Se for a branch principal, tamb√©m envia com a tag 'latest'
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            LATEST_IMAGE="${{ env.ARTIFACT_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest"
            docker tag "${{ env.IMAGE_FULL_NAME }}" "$LATEST_IMAGE"
            docker push "$LATEST_IMAGE"
            echo "‚úÖ Tag 'latest' adicionada e enviada."
          fi
