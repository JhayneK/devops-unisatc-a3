# .github/workflows/e2e-tests.yml
# Workflow de CI/CD para Testes E2E com Playwright
# Projeto: DevOps UNISATC A3 - Strapi Application

name: üé≠ E2E Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Executa testes diariamente √†s 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Permite execu√ß√£o manual
    inputs:
      test_type:
        description: 'Tipo de teste para executar'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - admin
        - api
        - integration

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job para setup e cache
  setup:
    name: üîß Setup
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üîë Generate cache key
        id: cache-key
        run: |
          echo "key=node-modules-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: üíæ Cache dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: üì• Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: üé≠ Install Playwright browsers
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps

  # Job para build da aplica√ß√£o Strapi
  build:
    name: üèóÔ∏è Build Strapi
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üíæ Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}

      - name: üèóÔ∏è Build Strapi
        run: |
          pnpm build
        env:
          NODE_ENV: production
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/data.db

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: strapi-build
          path: |
            build/
            .tmp/
          retention-days: 1

  # Job para testes de smoke (r√°pidos e essenciais)
  smoke-tests:
    name: üí® Smoke Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: ${{ github.event.inputs.test_type == 'smoke' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üíæ Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: strapi-build

      - name: üöÄ Start Strapi in background
        run: |
          pnpm start &
          echo $! > strapi.pid
        env:
          NODE_ENV: test
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/test-data.db
          STRAPI_DISABLE_UPDATE_NOTIFICATION: true

      - name: ‚è≥ Wait for Strapi to be ready
        run: |
          timeout 120s bash -c 'until curl -f http://localhost:1337/_health; do sleep 2; done'

      - name: üß™ Run smoke tests
        run: pnpm test --grep="@smoke"
        env:
          CI: true
          STRAPI_URL: http://localhost:1337

      - name: üìä Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            test-results/
            playwright-report/

  # Job para testes do admin panel
  admin-tests:
    name: üëë Admin Panel Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: ${{ github.event.inputs.test_type == 'admin' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    strategy:
      matrix:
        browser: [chromium, firefox]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üíæ Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: strapi-build

      - name: üöÄ Start Strapi in background
        run: |
          pnpm start &
          echo $! > strapi.pid
        env:
          NODE_ENV: test
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/test-data.db

      - name: ‚è≥ Wait for Strapi to be ready
        run: |
          timeout 120s bash -c 'until curl -f http://localhost:1337/_health; do sleep 2; done'

      - name: üß™ Run admin tests - ${{ matrix.browser }}
        run: pnpm test --project=${{ matrix.browser }}-admin --grep="@admin"
        env:
          CI: true
          STRAPI_URL: http://localhost:1337

      - name: üìä Upload admin test results - ${{ matrix.browser }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: admin-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # Job para testes de API
  api-tests:
    name: üîå API Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: ${{ github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üíæ Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: strapi-build

      - name: üöÄ Start Strapi in background
        run: |
          pnpm start &
          echo $! > strapi.pid
        env:
          NODE_ENV: test
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/test-data.db

      - name: ‚è≥ Wait for Strapi to be ready
        run: |
          timeout 120s bash -c 'until curl -f http://localhost:1337/_health; do sleep 2; done'

      - name: üß™ Run API tests
        run: pnpm test --project=api-tests --grep="@api"
        env:
          CI: true
          STRAPI_URL: http://localhost:1337
          STRAPI_API_URL: http://localhost:1337/api

      - name: üìä Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            test-results/
            playwright-report/

  # Job para testes de integra√ß√£o
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: ${{ github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üíæ Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: strapi-build

      - name: üöÄ Start Strapi in background
        run: |
          pnpm start &
          echo $! > strapi.pid
        env:
          NODE_ENV: test
          DATABASE_CLIENT: sqlite
          DATABASE_FILENAME: .tmp/test-data.db

      - name: ‚è≥ Wait for Strapi to be ready
        run: |
          timeout 120s bash -c 'until curl -f http://localhost:1337/_health; do sleep 2; done'

      - name: üß™ Run integration tests
        run: pnpm test integration.test.js --grep="@integration"
        env:
          CI: true
          STRAPI_URL: http://localhost:1337

      - name: üìä Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            playwright-report/

  # Job para relat√≥rios consolidados
  report:
    name: üìã Generate Reports
    runs-on: ubuntu-latest
    needs: [smoke-tests, admin-tests, api-tests, integration-tests]
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì• Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: "*test-results*"
          merge-multiple: true
          path: all-test-results/

      - name: üìä Generate consolidated report
        run: |
          echo "# üìä E2E Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## üèÉ‚Äç‚ôÇÔ∏è Execution Details" >> test-summary.md
          echo "- **Workflow**: ${{ github.workflow }}" >> test-summary.md
          echo "- **Run ID**: ${{ github.run_id }}" >> test-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> test-summary.md
          echo "- **Date**: $(date -u)" >> test-summary.md
          echo "" >> test-summary.md
          
          echo "## üìà Test Results" >> test-summary.md
          echo "" >> test-summary.md
          
          # Verifica resultados dos jobs
          if [ "${{ needs.smoke-tests.result }}" = "success" ]; then
            echo "‚úÖ **Smoke Tests**: PASSED" >> test-summary.md
          else
            echo "‚ùå **Smoke Tests**: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.admin-tests.result }}" = "success" ]; then
            echo "‚úÖ **Admin Tests**: PASSED" >> test-summary.md
          else
            echo "‚ùå **Admin Tests**: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.api-tests.result }}" = "success" ]; then
            echo "‚úÖ **API Tests**: PASSED" >> test-summary.md
          else
            echo "‚ùå **API Tests**: FAILED" >> test-summary.md
          fi
          
          if [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "‚úÖ **Integration Tests**: PASSED" >> test-summary.md
          else
            echo "‚ùå **Integration Tests**: FAILED" >> test-summary.md
          fi

      - name: üì§ Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: |
            test-summary.md
            all-test-results/

      - name: üí¨ Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job para cleanup e notifica√ß√µes
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [report]
    if: always()
    steps:
      - name: üßπ Cleanup workspace
        run: |
          echo "Limpando workspace..."
          rm -rf node_modules || true
          rm -rf .tmp || true
          rm -rf test-results || true

      - name: üì¨ Send notification (on failure)
        if: failure()
        run: |
          echo "‚ùå E2E Tests falharam! Verifique os logs para mais detalhes."
          echo "üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"